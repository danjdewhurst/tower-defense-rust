[graph]
# If true, metadata will be collected with `--all-features`. Note that this can't
# be toggled off if true, if you want to conditionally enable it you have to pass
# `--all-features` on the cmd line
all-features = false
# If true, metadata will be collected with `--no-default-features`. The same
# caveat with `all-features` applies
no-default-features = false
# If set, these feature will be enabled when collecting metadata. If `--features`
# is specified on the cmd line they will take precedence over this option.
features = []
# When creating the dependency graph used as the source of truth when checks are
# executed, this field can be used to prune crates from the graph, removing them
# from all checks. This is an extremely heavy hammer, as if a crate is pruned
# from the graph, all of its dependencies will also be pruned unless they are
# also used by another crate in the graph that hasn't been pruned. This field
# can be used for removing dev, build, or uncommon target dependencies that may
# be problematic, but shouldn't be used for runtime dependencies unless you
# know exactly what you're doing.
exclude = []
# If true, all dev dependencies will be skipped when creating the graph
exclude-dev = false

[output]
# When outputting inclusion graphs in diagnostics that include features, this
# option can be used to specify the depth at which feature edges will be added.
# This option is included since the graphs can be quite large and the addition
# of features from the crate(s) to all of the graph roots can be far too verbose.
# This option can be overridden via `--feature-depth` on the cmd line
feature-depth = 1

[advisories]
# The path where the advisory database is cloned/fetched into
db-path = "~/.cargo/advisory-db"
# The url(s) of the advisory databases to use
db-urls = ["https://github.com/rustsec/advisory-db"]
# The lint level for security vulnerabilities
# vulnerability = "deny"
# The lint level for unmaintained crates
# unmaintained = "warn"
# The lint level for crates that have been yanked from their source registry
# yanked = "warn"
# The lint level for crates with security notices. Note that as of
# 2019-12-17 there are no security notice advisories in
# https://github.com/rustsec/advisory-db
# notice = "warn"
# A list of advisory IDs to ignore. Note that ignored advisories will still
# output a note when they are encountered.
ignore = [
    "RUSTSEC-2024-0436", # paste crate - unmaintained but used by Bevy dependencies
]
# Threshold for security vulnerabilities, any vulnerability with a CVSS score
# lower than this threshold will be ignored. Note that ignored advisories will
# still output a note when they are encountered.
# * None - CVSS Score 0.0
# * Low - CVSS Score 0.1 - 3.9
# * Medium - CVSS Score 4.0 - 6.9
# * High - CVSS Score 7.0 - 8.9
# * Critical - CVSS Score 9.0 - 10.0
# severity-threshold = "none"

[licenses]
# The confidence threshold for detecting a license from a license text.
# The higher the value, the more closely the license text must match the
# canonical license text of a valid SPDX license file.
# [possible values: any between 0.0 and 1.0].
confidence-threshold = 0.8
# List of explicitly allowed licenses
# See https://spdx.org/licenses/ for list of possible licenses
# [possible values: any SPDX 3.11 short identifier (+ optional exception)].
allow = [
    "MIT",
    "MIT-0",
    "Apache-2.0",
    "Apache-2.0 WITH LLVM-exception",
    "BSD-2-Clause",
    "BSD-3-Clause",
    "ISC",
    "Unicode-DFS-2016",
    "Unicode-3.0",
    "CC0-1.0",
    "Zlib",
]
# List of explicitly disallowed licenses
# See https://spdx.org/licenses/ for list of possible licenses
# [possible values: any SPDX 3.11 short identifier (+ optional exception)].
# deny = [
#     "GPL-2.0",
#     "GPL-3.0",
#     "AGPL-1.0",
#     "AGPL-3.0",
# ]
# Lint level for when multiple versions of the same license are detected
# copyleft = "warn"
# The confidence threshold for detecting a license from a license text.
# The higher the value, the more closely the license text must match the
# canonical license text of a valid SPDX license file.
# [possible values: any between 0.0 and 1.0].
# default = "deny"
# The lint level used when no license is detected
# unlicensed = "deny"
# List of allowed licenses for dependencies that don't have the license field filled.
# This is useful for allowing licenses like Apache-2.0 OR MIT which are common
# but don't have a simple SPDX identifier.
# allow-osi-fsf-free = "both"
# List of allowed licenses for dependencies that are dual licensed.
# This is useful for allowing licenses like Apache-2.0 OR MIT which are common
# but don't have a simple SPDX identifier.
# copyleft-compat = "warn"

[bans]
# Lint level for when multiple versions of the same crate are detected
multiple-versions = "warn"
# Lint level for when a crate version requirement is `*`
wildcards = "allow"
# The graph highlighting used when creating dotgraphs for crates
# with multiple versions
# * all - all edges are highlighted
# * first-set-of-smallest-versions - only the first set of smallest versions are highlighted
# * smallest-versions - only the smallest version of each set of matches is highlighted
# * none - no highlighting
highlight = "all"
# List of crates that are allowed. Use with care!
allow = [
    #{ name = "ansi_term", version = "=0.11.0" },
]
# List of crates to deny
deny = [
    # Each entry the name of a crate and a version range. If version is
    # not specified, all versions will be matched.
    #{ name = "ansi_term", version = "=0.11.0" },
    
    # Wrapper crates can optionally be specified to allow the crate when it
    # is a dependency of the specified wrapper crate
    #{ name = "ansi_term", version = "=0.11.0", wrappers = [] },
]

[sources]
# Lint level for what to happen when a crate from a crate registry that is
# not in the allow list is encountered
unknown-registry = "warn"
# Lint level for what to happen when a crate from a git repository that is not
# in the allow list is encountered
unknown-git = "warn"
# List of allowed registries
allow-registry = ["https://github.com/rust-lang/crates.io-index"]
# List of allowed git repositories
allow-git = []